import React, { useState, useEffect, useRef } from 'react';
import Papa from 'papaparse';
import * as d3 from 'd3';
import ReactMarkdown from 'react-markdown';
import UkraineMap from './components/UkraineMap';
import StatsPanel from './components/StatsPanel';
import './App.css';
import UkraineMapExample from './components/UkraineMapExample';
import RegionNameDebugger from './components/RegionNameDebugger';

function App() {
  const [data, setData] = useState([]);
  const [currentChapter, setCurrentChapter] = useState(0);
  const [currentSubsection, setCurrentSubsection] = useState(0);
  const [isInSubsectionMode, setIsInSubsectionMode] = useState(false);
  const [showChoroplethDemo, setShowChoroplethDemo] = useState(false);
  const [isInitialized, setIsInitialized] = useState(false);
  const [isChapterTransitioning, setIsChapterTransitioning] = useState(false);
  const [isMapTransitioning, setIsMapTransitioning] = useState(false);
  
  // Refs for navigation
  const totalSections = useRef(0);
  const sectionMap = useRef([]);

  // Comprehensive story structure based on ALL dataset nominations
  const storyStructure = [
    {
      id: 'intro',
      title: '–ó–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–∫–∞–ª–∞–≤—Ä—ñ–≤ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö –£–∫—Ä–∞—ó–Ω–∏ 2024',
      content: `–î–æ—Å–ª—ñ–¥—ñ—Ç—å –≥–µ–æ–≥—Ä–∞—Ñ—ñ—é –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–∫–∞–ª–∞–≤—Ä—ñ–≤ —É 25 —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Ä–µ–≥—ñ–æ–Ω–∞—Ö. 
      –¶–µ–π –∞–Ω–∞–ª—ñ–∑ –ø–æ–∫–∞–∑—É—î, –∫—É–¥–∏ –∑–∞—Ä–∞—Ö–æ–≤—É–≤–∞–ª–∏—Å—è 185 472 —Å—Ç—É–¥–µ–Ω—Ç–∏-–±–∞–∫–∞–ª–∞–≤—Ä–∏ —É 2024 —Ä–æ—Ü—ñ 
      —Ç–∞ —è–∫—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç—ñ–≤ –æ–±–∏—Ä–∞–ª–∏ –∑–∞–∫–ª–∞–¥–∏ –≤–∏—â–æ—ó –æ—Å–≤—ñ—Ç–∏ –≤ –∫–æ–∂–Ω–æ–º—É —Ä–µ–≥—ñ–æ–Ω—ñ.`,
      mapConfig: { 
        metric: 'Total_Students', 
        colorScheme: 'interpolateBlues',
        title: '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö –±–∞–∫–∞–ª–∞–≤—Ä—ñ–≤ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö'
      },
      sections: []
    },

    {
      id: 'score-results',
      title: '1. –ê–∫–∞–¥–µ–º—ñ—á–Ω–∞ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö',
      content: '–ê–Ω–∞–ª—ñ–∑ –∞–∫–∞–¥–µ–º—ñ—á–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤, —è–∫—ñ –∑–∞—Ä–∞—Ö–æ–≤—É–≤–∞–ª–∏—Å—è –¥–æ –∑–∞–∫–ª–∞–¥—ñ–≤ —Ä—ñ–∑–Ω–∏—Ö —Ä–µ–≥—ñ–æ–Ω—ñ–≤',
      mapConfig: { 
        metric: 'Average_Score', 
        colorScheme: 'interpolateBlues',
        title: '–ê–∫–∞–¥–µ–º—ñ—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤'
      },
      sections: [
        {
          id: 'average-score',
          title: '–°–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö',
          content: `### üìä –°–µ—Ä–µ–¥–Ω—ñ –±–∞–ª–∏ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö

**üèÜ –ù–∞–π–≤–∏—â–∏–π —Å–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö:**
- **–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å** ‚Äî 157,52 –±–∞–ª—ñ–≤ (–∑–∞–∫–ª–∞–¥–∏ —Ä–µ–≥—ñ–æ–Ω—É –º–∞—é—Ç—å –≤–∏—Å–æ–∫—ñ –≤–∏–º–æ–≥–∏ –¥–æ –≤—Å—Ç—É–ø—É)

**üìâ –ù–∞–π–Ω–∏–∂—á–∏–π —Å–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö:**
- **–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å** ‚Äî 141,8 –±–∞–ª—ñ–≤ (–∑–∞–∫–ª–∞–¥–∏ —Ä–µ–≥—ñ–æ–Ω—É –±—ñ–ª—å—à –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç—ñ–≤ –∑ —Ä—ñ–∑–Ω–∏–º–∏ –±–∞–ª–∞–º–∏)

**üìè –†—ñ–∑–Ω–∏—Ü—è –º—ñ–∂ —Ä–µ–≥—ñ–æ–Ω–∞–º–∏:**
- **15,72 –±–∞–ª—ñ–≤** –ø–æ–∫–∞–∑—É—î —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ—Å—Ç—å –æ—Å–≤—ñ—Ç–Ω—ñ—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –ø–æ –∫—Ä–∞—ó–Ω—ñ`,
          mapConfig: { 
            metric: 'Average_Score', 
            colorScheme: 'interpolateBlues',
            title: '–°–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö'
          }
        },
        {
          id: 'most-near-perfect',
          title: '–ó–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –≤–∏—Å–æ–∫–æ–±–∞–ª—å–Ω–∏–∫—ñ–≤',
          content: `### üìä –†–æ–∑–ø–æ–¥—ñ–ª –≤–∏—Å–æ–∫–æ–±–∞–ª—å–Ω–∏–∫—ñ–≤ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö

**üèÜ –ù–∞–π–±—ñ–ª—å—à–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞ –∞–±—Å–æ–ª—é—Ç–Ω–∏–º–∏ —á–∏—Å–ª–∞–º–∏:**
- **–ö–∏—ó–≤** ‚Äî –ø–æ–Ω–∞–¥ 1,200 —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
- **–•–∞—Ä–∫—ñ–≤** ‚Äî 340 —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤  
- **–õ—å–≤—ñ–≤** ‚Äî 280 —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤

**üìà –ù–∞–π–∫—Ä–∞—â—ñ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—ó –≤–∏—Å–æ–∫–æ–±–∞–ª—å–Ω–∏–∫—ñ–≤:**
- **–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å** ‚Äî 4,26%
- **–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å** ‚Äî 3,8%
- **–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å** ‚Äî 3,5%

**üá∫üá¶ –°–µ—Ä–µ–¥–Ω—ñ–π –ø–æ–∫–∞–∑–Ω–∏–∫ –ø–æ –£–∫—Ä–∞—ó–Ω—ñ:** –±–ª–∏–∑—å–∫–æ 3,2% –≤—ñ–¥ —É—Å—ñ—Ö –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö

**üí° –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:** –í–µ–ª–∏–∫—ñ –º—ñ—Å—Ç–∞ –ª—ñ–¥–∏—Ä—É—é—Ç—å –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é, –∞–ª–µ –º–µ–Ω—à—ñ —Ä–µ–≥—ñ–æ–Ω–∏ —á–∞—Å—Ç–æ –º–∞—é—Ç—å –∫—Ä–∞—â—ñ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—ó —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–∞–∫–ª–∞–¥—ñ–≤`,
          mapConfig: { 
            metric: 'Near_Perfect_Count', 
            colorScheme: 'interpolateBlues',
            title: '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö –∑ –º–∞–π–∂–µ —ñ–¥–µ–∞–ª—å–Ω–∏–º–∏ –±–∞–ª–∞–º–∏'
          }
        },
        {
          id: 'score-spread',
          title: '–†—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ—Å—Ç—å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö –∑–∞ –±–∞–ª–∞–º–∏',
          content: `### üìà –†—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ—Å—Ç—å –±–∞–ª—ñ–≤ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö

**üìä –ù–∞–π–±—ñ–ª—å—à–∞ —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ—Å—Ç—å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö:**
- **–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å** ‚Äî 19,9 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è (–∑–∞–∫–ª–∞–¥–∏ –º–∞—é—Ç—å —à–∏—Ä–æ–∫–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω –≤–∏–º–æ–≥ –¥–æ –≤—Å—Ç—É–ø—É)

**üéØ –ù–∞–π–±—ñ–ª—å—à –æ–¥–Ω–æ—Ä—ñ–¥–Ω—ñ –∑–∞ –±–∞–ª–∞–º–∏:**
- **–í—ñ–Ω–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å** ‚Äî 14,19 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è (–∑–∞–∫–ª–∞–¥–∏ –º–∞—é—Ç—å —Å—Ö–æ–∂—ñ –≤–∏–º–æ–≥–∏ –¥–æ –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç—ñ–≤)

**üí° –í–∏—Å–Ω–æ–≤–æ–∫:**
- –¶–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ä—ñ–∑–Ω—ñ –æ—Å–≤—ñ—Ç–Ω—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó —Ä–µ–≥—ñ–æ–Ω—ñ–≤: –≤—ñ–¥ —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–∏—Ö –¥–æ —ñ–Ω–∫–ª—é–∑–∏–≤–Ω–∏—Ö –ø—ñ–¥—Ö–æ–¥—ñ–≤`,
          mapConfig: { 
            metric: 'Std_Deviation', 
            colorScheme: 'interpolateBlues',
            title: '–†—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ—Å—Ç—å –±–∞–ª—ñ–≤ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤'
          }
        }
      ]
    },
    {
      id: 'age-demographics',
      title: '2. –í—ñ–∫–æ–≤—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö',
      content: '–ê–Ω–∞–ª—ñ–∑ –≤—ñ–∫–æ–≤–æ–≥–æ —Å–∫–ª–∞–¥—É —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤, —è–∫—ñ –∑–∞—Ä–∞—Ö–æ–≤—É–≤–∞–ª–∏—Å—è –¥–æ –∑–∞–∫–ª–∞–¥—ñ–≤ —Ä—ñ–∑–Ω–∏—Ö —Ä–µ–≥—ñ–æ–Ω—ñ–≤',
      mapConfig: { 
        metric: 'Median_Age', 
        colorScheme: 'interpolateBlues',
        title: '–í—ñ–∫–æ–≤–∏–π —Å–∫–ª–∞–¥ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤'
      },
            sections: [
        {
          id: 'age-analysis',
          title: '–í—ñ–∫–æ–≤–∏–π —Å–∫–ª–∞–¥ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö',
          content: `### üéÇ –í—ñ–∫–æ–≤–∏–π —Å–∫–ª–∞–¥ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤

**üë∂ –ù–∞–π–º–æ–ª–æ–¥—à–∏–π –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏–π:**
- **–ö–∏—ó–≤** ‚Äî 13 —Ä–æ–∫—ñ–≤ (—Å—Ç–æ–ª–∏—á–Ω—ñ –∑–∞–∫–ª–∞–¥–∏ –ø—Ä–∏–π–º–∞—é—Ç—å –Ω–∞–π—Ç–∞–ª–∞–Ω–æ–≤–∏—Ç—ñ—à–∏—Ö –º–æ–ª–æ–¥–∏—Ö –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç—ñ–≤)

**üë¥ –ù–∞–π—Å—Ç–∞—Ä—à–∏–π –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏–π:**
- **–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å** ‚Äî 75 —Ä–æ–∫—ñ–≤ (—Ä–µ–≥—ñ–æ–Ω –≤—ñ–¥–∫—Ä–∏—Ç–∏–π –¥–ª—è –æ—Å–≤—ñ—Ç–∏ –¥–æ—Ä–æ—Å–ª–∏—Ö)

**üìä –ú–µ–¥—ñ–∞–Ω–Ω–∏–π –≤—ñ–∫ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö:**
- **–ù–∞–π–≤–∏—â–∏–π:** –õ—É–≥–∞–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å (26 —Ä–æ–∫—ñ–≤) ‚Äî —Å—é–¥–∏ —á–∞—Å—Ç—ñ—à–µ –∑–∞—Ä–∞—Ö–æ–≤—É—é—Ç—å—Å—è –∑—Ä—ñ–ª—ñ —Å—Ç—É–¥–µ–Ω—Ç–∏
- **–ù–∞–π–Ω–∏–∂—á–∏–π:** –ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å (17 —Ä–æ–∫—ñ–≤) ‚Äî —Ä–µ–≥—ñ–æ–Ω –ø—Ä–∏–≤–∞–±–ª—é—î –º–æ–ª–æ–¥—å

`,
          mapConfig: { 
            metric: 'Median_Age', 
            colorScheme: 'interpolateBlues',
            title: '–ú–µ–¥—ñ–∞–Ω–Ω–∏–π –≤—ñ–∫ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤'
          }
        },
        {
          id: 'below-18-percentage',
          title: '–ó–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –º–æ–ª–æ–¥—ñ –¥–æ 18 —Ä–æ–∫—ñ–≤',
          content: `### üë∂ –ó–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –º–æ–ª–æ–¥—ñ –¥–æ 18 —Ä–æ–∫—ñ–≤

**üìà –ù–∞–π–≤–∏—â–∞ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—è –º–æ–ª–æ–¥—ñ –¥–æ 18 —Ä–æ–∫—ñ–≤:**
- **–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å** ‚Äî **69,69%** (–±–ª–∏–∑—å–∫–æ 14,400 –º–æ–ª–æ–¥–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤)

**üìâ –ù–∞–π–Ω–∏–∂—á–∞ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—è –º–æ–ª–æ–¥—ñ:**
- **–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å** ‚Äî **20,90%** (–ø–µ—Ä–µ–≤–∞–∂–Ω–æ –∑—Ä—ñ–ª—ñ –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç–∏)

**üá∫üá¶ –°–µ—Ä–µ–¥–Ω—ñ–π –ø–æ–∫–∞–∑–Ω–∏–∫ –ø–æ –£–∫—Ä–∞—ó–Ω—ñ:**
- –ë–ª–∏–∑—å–∫–æ **50%** –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö —î –Ω–µ–ø–æ–≤–Ω–æ–ª—ñ—Ç–Ω—ñ–º–∏

**üèÜ –ó–∞ –∞–±—Å–æ–ª—é—Ç–Ω–∏–º–∏ —á–∏—Å–ª–∞–º–∏:**
- **–ö–∏—ó–≤** –ª—ñ–¥–∏—Ä—É—î (29,680+ –º–æ–ª–æ–¥–∏—Ö), –∞–ª–µ –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π–Ω–æ –º–µ–Ω—à–µ –Ω—ñ–∂ –õ—å–≤—ñ–≤ (**64,16%**)`,
          mapConfig: { 
            metric: 'Under_18_Count', 
            colorScheme: 'interpolateBlues',
            title: '–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –¥–æ 18 —Ä–æ–∫—ñ–≤ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö'
          }
        },
        {
          id: 'above-30-percentage',
          title: '–ó–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –¥–æ—Ä–æ—Å–ª–∏—Ö –ø–æ–Ω–∞–¥ 30 —Ä–æ–∫—ñ–≤',
          content: `### üë®‚Äçüíº –ó–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –¥–æ—Ä–æ—Å–ª–∏—Ö –ø–æ–Ω–∞–¥ 30 —Ä–æ–∫—ñ–≤

**üìà –ù–∞–π–≤–∏—â–∞ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—è –¥–æ—Ä–æ—Å–ª–∏—Ö –ø–æ–Ω–∞–¥ 30 —Ä–æ–∫—ñ–≤:**
- **–õ—É–≥–∞–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å** ‚Äî **35,65%** (–±–ª–∏–∑—å–∫–æ 287 –¥–æ—Ä–æ—Å–ª–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤)

**üìâ –ù–∞–π–Ω–∏–∂—á–∞ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—è –¥–æ—Ä–æ—Å–ª–∏—Ö:**
- **–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å** ‚Äî **3,26%** (–ø–µ—Ä–µ–≤–∞–∂–Ω–æ –º–æ–ª–æ–¥—ñ –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç–∏)

**üá∫üá¶ –°–µ—Ä–µ–¥–Ω—ñ–π –ø–æ–∫–∞–∑–Ω–∏–∫ –ø–æ –£–∫—Ä–∞—ó–Ω—ñ:**
- –ë–ª–∏–∑—å–∫–æ **10-15%** –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö —î –∑—Ä—ñ–ª–æ–≥–æ –≤—ñ–∫—É

**üèÜ –ó–∞ –∞–±—Å–æ–ª—é—Ç–Ω–∏–º–∏ —á–∏—Å–ª–∞–º–∏:**
- **–ö–∏—ó–≤** –ª—ñ–¥–∏—Ä—É—î (2,345+ –¥–æ—Ä–æ—Å–ª–∏—Ö), –∞–ª–µ –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π–Ω–æ –º–µ–Ω—à–µ –Ω—ñ–∂ –õ—É–≥–∞–Ω—Å—å–∫ (**5,07%**)`,
          mapConfig: { 
            metric: 'Over_30_Count', 
            colorScheme: 'interpolateBlues',
            title: '–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –ø–æ–Ω–∞–¥ 30 —Ä–æ–∫—ñ–≤ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö'
          }
        }
      ]
    },
    {
      id: 'gender-analysis',
      title: '3. –ì–µ–Ω–¥–µ—Ä–Ω–∏–π —Å–∫–ª–∞–¥ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö',
      content: '–ê–Ω–∞–ª—ñ–∑ –≥–µ–Ω–¥–µ—Ä–Ω–æ–≥–æ —Ä–æ–∑–ø–æ–¥—ñ–ª—É —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤, —è–∫—ñ –∑–∞—Ä–∞—Ö–æ–≤—É–≤–∞–ª–∏—Å—è –¥–æ –∑–∞–∫–ª–∞–¥—ñ–≤ —Ä—ñ–∑–Ω–∏—Ö —Ä–µ–≥—ñ–æ–Ω—ñ–≤',
      mapConfig: { 
        metric: 'Gender_Balance_Score', 
        colorScheme: 'interpolateBlues',
        title: '–ì–µ–Ω–¥–µ—Ä–Ω–∏–π —Å–∫–ª–∞–¥ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤'
      },
      sections: [
        {
          id: 'gender-participation',
          title: '–ó–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∂—ñ–Ω–æ–∫ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö',
          content: `### üë©‚Äçüéì –ó–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∂—ñ–Ω–æ–∫ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö

**üìà –ù–∞–π–≤–∏—â–∞ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—è –∂—ñ–Ω–æ–∫ —Å–µ—Ä–µ–¥ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö:**
- **–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å** ‚Äî 60,59% (–±–ª–∏–∑—å–∫–æ 1,200 –∂—ñ–Ω–æ–∫)

**üìâ –ù–∞–π–Ω–∏–∂—á–∞ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—è –∂—ñ–Ω–æ–∫:**
- **–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å** ‚Äî 25,87% (–ø–µ—Ä–µ–≤–∞–∂–Ω–æ –∑–∞—Ä–∞—Ö–æ–≤—É—é—Ç—å—Å—è —á–æ–ª–æ–≤—ñ–∫–∏)

**‚öñÔ∏è –ó–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–µ –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è:**
- **–û–¥–µ—Å—å–∫–∞ —Ç–∞ –í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—ñ** ‚Äî ~50% –∂—ñ–Ω–æ–∫

**üèÜ –ó–∞ –∞–±—Å–æ–ª—é—Ç–Ω–∏–º–∏ —á–∏—Å–ª–∞–º–∏:**
- **–ö–∏—ó–≤** –ª—ñ–¥–∏—Ä—É—î (17,000+ –∂—ñ–Ω–æ–∫), –∞–ª–µ –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π–Ω–æ –º–µ–Ω—à–µ –Ω—ñ–∂ –ó–∞–∫–∞—Ä–ø–∞—Ç—Ç—è`,
          mapConfig: { 
            metric: 'Female_Percentage', 
            colorScheme: 'interpolateBlues',
            title: '–í—ñ–¥—Å–æ—Ç–æ–∫ –∂—ñ–Ω–æ–∫ —Å–µ—Ä–µ–¥ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö'
          }
        },
        {
          id: 'male-participation',
          title: '–ó–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —á–æ–ª–æ–≤—ñ–∫—ñ–≤ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö',
          content: `### üë®‚Äçüéì –ó–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —á–æ–ª–æ–≤—ñ–∫—ñ–≤ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö

**üìà –ù–∞–π–≤–∏—â–∞ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—è —á–æ–ª–æ–≤—ñ–∫—ñ–≤ —Å–µ—Ä–µ–¥ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö:**
- **–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å** ‚Äî 74,13% (–±–ª–∏–∑—å–∫–æ 850 —á–æ–ª–æ–≤—ñ–∫—ñ–≤)

**üìâ –ù–∞–π–Ω–∏–∂—á–∞ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—è —á–æ–ª–æ–≤—ñ–∫—ñ–≤:**
- **–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å** ‚Äî 39,41% (–ø–µ—Ä–µ–≤–∞–∂–Ω–æ –∑–∞—Ä–∞—Ö–æ–≤—É—é—Ç—å—Å—è –∂—ñ–Ω–∫–∏)

**üá∫üá¶ –°–µ—Ä–µ–¥–Ω—ñ–π –ø–æ–∫–∞–∑–Ω–∏–∫ –ø–æ –£–∫—Ä–∞—ó–Ω—ñ:**
- –ü—Ä–∏–±–ª–∏–∑–Ω–æ 45% –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö —î —á–æ–ª–æ–≤—ñ–∫–∞–º–∏

**üèÜ –ó–∞ –∞–±—Å–æ–ª—é—Ç–Ω–∏–º–∏ —á–∏—Å–ª–∞–º–∏:**
- **–ö–∏—ó–≤** –ª—ñ–¥–∏—Ä—É—î (13,000+ —á–æ–ª–æ–≤—ñ–∫—ñ–≤), –∞–ª–µ –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π–Ω–æ –º–µ–Ω—à–µ –Ω—ñ–∂ –•–µ—Ä—Å–æ–Ω`,
          mapConfig: { 
            metric: 'Male_Percentage', 
            colorScheme: 'interpolateBlues',
            title: '–í—ñ–¥—Å–æ—Ç–æ–∫ —á–æ–ª–æ–≤—ñ–∫—ñ–≤ —Å–µ—Ä–µ–¥ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö'
          }
        },
        {
          id: 'gender-performance-gap',
          title: '–ì–µ–Ω–¥–µ—Ä–Ω—ñ —Ä–æ–∑—Ä–∏–≤–∏ –≤ –±–∞–ª–∞—Ö –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö',
          content: `### ‚öñÔ∏è –ì–µ–Ω–¥–µ—Ä–Ω—ñ —Ä–æ–∑—Ä–∏–≤–∏ –≤ –±–∞–ª–∞—Ö –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö

**üë©‚Äçüéì –ù–∞–π–±—ñ–ª—å—à–∏–π —Ä–æ–∑—Ä–∏–≤ –Ω–∞ –∫–æ—Ä–∏—Å—Ç—å –∂—ñ–Ω–æ–∫:**
- **–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å** ‚Äî +6,28 –±–∞–ª—ñ–≤ (–∂—ñ–Ω–∫–∏ –º–∞—é—Ç—å –∑–Ω–∞—á–Ω–æ –≤–∏—â—ñ –±–∞–ª–∏)

**üë®‚Äçüéì –ù–∞–π–±—ñ–ª—å—à–∏–π —Ä–æ–∑—Ä–∏–≤ –Ω–∞ –∫–æ—Ä–∏—Å—Ç—å —á–æ–ª–æ–≤—ñ–∫—ñ–≤:**
- **–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å** ‚Äî +3,42 –±–∞–ª—ñ–≤

**üéØ –ù–∞–π–º–µ–Ω—à–∏–π –≥–µ–Ω–¥–µ—Ä–Ω–∏–π —Ä–æ–∑—Ä–∏–≤:**
- **–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å** ‚Äî 0,01 –±–∞–ª—ñ–≤ (–ø—Ä–∞–∫—Ç–∏—á–Ω–æ –æ–¥–Ω–∞–∫–æ–≤—ñ –±–∞–ª–∏)

**üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Ç–µ–Ω–¥–µ–Ω—Ü—ñ—è:**
- –£ –±—ñ–ª—å—à–æ—Å—Ç—ñ —Ä–µ–≥—ñ–æ–Ω—ñ–≤ –∂—ñ–Ω–∫–∏ –∑–∞—Ä–∞—Ö–æ–≤—É—é—Ç—å—Å—è –∑ –≤–∏—â–∏–º–∏ –±–∞–ª–∞–º–∏`,
          mapConfig: { 
            metric: 'Gender_Score_Gap', 
            colorScheme: 'interpolateBlues',
            title: '–†—ñ–∑–Ω–∏—Ü—è –≤ –±–∞–ª–∞—Ö –º—ñ–∂ –∂—ñ–Ω–∫–∞–º–∏ —Ç–∞ —á–æ–ª–æ–≤—ñ–∫–∞–º–∏ (–∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏–º–∏)'
          }
        },

      ]
    }
  ];

  // Load CSV data
  useEffect(() => {
    console.log('üìä Loading CSV data...');
    Papa.parse('/regional_nominations_dataset.csv', {
      download: true,
      header: true,
      complete: (results) => {
        console.log('‚úÖ CSV data loaded:', {
          totalRows: results.data.length,
          sampleRow: results.data[0],
          columns: Object.keys(results.data[0] || {})
        });
        setData(results.data);
      },
      error: (error) => {
        console.error('‚ùå Error loading CSV:', error);
      }
    });
  }, []);

  // Calculate total sections and create navigation map
  useEffect(() => {
    const sections = [];
    // Only add main chapters to navigation dots, not subsections
    storyStructure.forEach((chapter, chapterIndex) => {
      sections.push({
        type: 'chapter',
        chapterIndex,
        chapterTitle: chapter.title,
        hasSubsections: chapter.sections && chapter.sections.length > 0,
        id: chapter.id
      });
    });
    
    sectionMap.current = sections;
    totalSections.current = sections.length;
    console.log('üìã Navigation map created (chapters only):', sections);
  }, [storyStructure]);

  // Get current section index (chapter level only)
  const getCurrentSectionIndex = () => {
    return currentChapter;
  };

  // Navigate to specific chapter with smooth transitions
  const navigateToChapter = (chapterIndex) => {
    if (chapterIndex < 0 || chapterIndex >= storyStructure.length || isChapterTransitioning) return;
    
    const chapter = storyStructure[chapterIndex];
    console.log('üéØ Navigating to chapter:', chapter);
    
    // Start transitions
    setIsChapterTransitioning(true);
    setIsMapTransitioning(true);
    
    // Wait for fade-out, then change content
    setTimeout(() => {
      setCurrentChapter(chapterIndex);
      
      // Check if chapter has subsections
      if (chapter.sections && chapter.sections.length > 0) {
        setIsInSubsectionMode(true);
        setCurrentSubsection(0);
      } else {
        setIsInSubsectionMode(false);
        setCurrentSubsection(0);
      }
      
      // Wait a bit, then fade in
      setTimeout(() => {
        setIsChapterTransitioning(false);
        setIsMapTransitioning(false);
      }, 100);
    }, 400);
  };

  // Navigation functions
  const goToPreviousSection = () => {
    if (isChapterTransitioning) return;
    
    if (isInSubsectionMode) {
      // Navigate within subsections
      if (currentSubsection > 0) {
        setCurrentSubsection(prev => prev - 1);
      } else {
        // Go to previous chapter
        if (currentChapter > 0) {
          navigateToChapter(currentChapter - 1);
        }
      }
    } else {
      // Navigate between chapters
      if (currentChapter > 0) {
        navigateToChapter(currentChapter - 1);
      }
    }
  };

  const goToNextSection = () => {
    if (isChapterTransitioning) return;
    
    if (isInSubsectionMode) {
      // Navigate within subsections
      const currentChapterData = storyStructure[currentChapter];
      const maxSubsections = currentChapterData?.sections?.length || 0;
      
      if (currentSubsection < maxSubsections - 1) {
        setCurrentSubsection(prev => prev + 1);
      } else {
        // Go to next chapter
        if (currentChapter < storyStructure.length - 1) {
          navigateToChapter(currentChapter + 1);
        }
      }
    } else {
      // Navigate between chapters
      if (currentChapter < storyStructure.length - 1) {
        navigateToChapter(currentChapter + 1);
      }
    }
  };

  // Keyboard navigation
  useEffect(() => {
    const handleKeyDown = (e) => {
      switch (e.key) {
        case 'ArrowUp':
          e.preventDefault();
          goToPreviousSection();
        break;
        case 'ArrowDown':
          e.preventDefault();
          goToNextSection();
        break;
      default:
          break;
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [currentChapter, currentSubsection, isInSubsectionMode, isChapterTransitioning]);

  // Initialize first section
  useEffect(() => {
    if (sectionMap.current.length > 0 && !isInitialized) {
      navigateToChapter(0);
      setIsInitialized(true);
      console.log('üìç App initialized with first chapter');
    }
  }, [sectionMap.current.length, isInitialized]);

  // Get current map configuration
  const getCurrentMapConfig = () => {
    // Default fallback configuration
    const defaultConfig = {
      metric: 'Total_Students',
      colorScheme: 'interpolateViridis',
      title: 'Ukrainian Regional Data'
    };

    // Check if we have valid storyStructure and currentChapter
    if (!storyStructure || storyStructure.length === 0) {
      console.warn('‚ö†Ô∏è No story structure available, using default config');
      return defaultConfig;
    }

    if (currentChapter < 0 || currentChapter >= storyStructure.length) {
      console.warn('‚ö†Ô∏è Invalid chapter index:', currentChapter, 'using default config');
      return defaultConfig;
    }

    const chapter = storyStructure[currentChapter];
    if (!chapter) {
      console.warn('‚ö†Ô∏è Chapter not found:', currentChapter, 'using default config');
      return defaultConfig;
    }
    
    // Handle subsection mode
    if (isInSubsectionMode && chapter.sections && chapter.sections.length > 0) {
      if (currentSubsection >= 0 && currentSubsection < chapter.sections.length) {
        const subsection = chapter.sections[currentSubsection];
        if (subsection && subsection.mapConfig) {
          return { ...defaultConfig, ...subsection.mapConfig };
        }
      }
    }
    
    // Return chapter config or default
    if (chapter.mapConfig) {
      return { ...defaultConfig, ...chapter.mapConfig };
    }
    
    console.warn('‚ö†Ô∏è No mapConfig found for chapter:', chapter.title, 'using default');
    return defaultConfig;
  };

  // Get current color scale
  const getCurrentColorScale = () => {
    const config = getCurrentMapConfig();
    
    // Validate config and colorScheme
    if (!config || !config.colorScheme) {
      console.warn('‚ö†Ô∏è No valid color scheme found, using default');
      return d3.scaleSequential(d3.interpolateViridis);
    }
    
    // Validate that the colorScheme exists in d3
    const interpolator = d3[config.colorScheme];
    if (!interpolator || typeof interpolator !== 'function') {
      console.warn('‚ö†Ô∏è Invalid color scheme:', config.colorScheme, 'using default');
      return d3.scaleSequential(d3.interpolateViridis);
    }
    
    try {
      return d3.scaleSequential(interpolator);
    } catch (error) {
      console.error('‚ùå Error creating color scale:', error);
      return d3.scaleSequential(d3.interpolateViridis);
    }
  };

  // Get Ukrainian metric name for gradient scale
  const getUkrainianMetricName = (metricKey) => {
    const config = getCurrentMapConfig();
    // If we have a title in the config, use it (it's already in Ukrainian)
    if (config.title) {
      return config.title.replace(' –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö', '').replace('–ö—ñ–ª—å–∫—ñ—Å—Ç—å ', '').replace('–í—ñ–¥—Å–æ—Ç–æ–∫ ', '');
    }
    
    // Fallback translations for metric keys
    const translations = {
      'Total_Students': '–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤',
      'Average_Score': '–°–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª',
      'Under_18_Count': '–°—Ç—É–¥–µ–Ω—Ç—ñ–≤ –¥–æ 18 —Ä–æ–∫—ñ–≤',
      'Under_18_Percentage': '–í—ñ–¥—Å–æ—Ç–æ–∫ –¥–æ 18 —Ä–æ–∫—ñ–≤',
      'Over_30_Count': '–°—Ç—É–¥–µ–Ω—Ç—ñ–≤ –ø–æ–Ω–∞–¥ 30 —Ä–æ–∫—ñ–≤',
      'Over_30_Percentage': '–í—ñ–¥—Å–æ—Ç–æ–∫ –ø–æ–Ω–∞–¥ 30 —Ä–æ–∫—ñ–≤',
      'Near_Perfect_Count': '–í–∏—Å–æ–∫–æ–±–∞–ª—å–Ω–∏–∫—ñ–≤',
      'Median_Age': '–ú–µ–¥—ñ–∞–Ω–Ω–∏–π –≤—ñ–∫',
      'Std_Deviation': '–†—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ—Å—Ç—å –±–∞–ª—ñ–≤',
      'Female_Percentage': '–í—ñ–¥—Å–æ—Ç–æ–∫ –∂—ñ–Ω–æ–∫',
      'Male_Percentage': '–í—ñ–¥—Å–æ—Ç–æ–∫ —á–æ–ª–æ–≤—ñ–∫—ñ–≤',
      'Gender_Balance_Score': '–ì–µ–Ω–¥–µ—Ä–Ω–∏–π –±–∞–ª–∞–Ω—Å',
      'Gender_Score_Gap': '–ì–µ–Ω–¥–µ—Ä–Ω–∏–π —Ä–æ–∑—Ä–∏–≤ —É –±–∞–ª–∞—Ö'
    };
    
    return translations[metricKey] || metricKey;
  };

  // Prepare map data using actual CSV columns
  const prepareMapData = () => {
    if (!data || data.length === 0) return { mapData: {}, originalData: {} };

    const mapData = {};
    const originalData = {};
    const config = getCurrentMapConfig();
    
    // Mapping between English TopoJSON names and Ukrainian CSV names
    const regionNameMapping = {
      '–õ—É–≥–∞–Ω—Å—å–∫–∞ –æ–±–ª.': 'Luhans\'k',
      '–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª.': 'Poltava', 
      '–º. –ö–∏—ó–≤': 'Kiev City',
      '–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞ –æ–±–ª.': 'Rivne',
      '–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª.': 'L\'viv',
      '–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª.': 'Donets\'k',
      '–í—ñ–Ω–Ω–∏—Ü—å–∫–∞ –æ–±–ª.': 'Vinnytsya',
      '–û–¥–µ—Å—å–∫–∞ –æ–±–ª.': 'Odessa',
      '–°—É–º—Å—å–∫–∞ –æ–±–ª.': 'Sumy',
      '–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª.': 'Kharkiv',
      '–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª.': 'Dnipropetrovs\'k',
      '–í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª.': 'Volyn',
      '–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª.': 'Kherson',
      '–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞ –æ–±–ª.': 'Kirovohrad',
      '–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª.': 'Mykolayiv',
      '–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞ –æ–±–ª.': 'Chernivtsi',
      '–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª.': 'Zaporizhzhya',
      '–ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª.': 'Cherkasy',
      '–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞ –æ–±–ª.': 'Transcarpathia',
      '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞ –æ–±–ª.': 'Ternopil\'',
      '–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞ –æ–±–ª.': 'Zhytomyr',
      '–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞ –æ–±–ª.': 'Khmel\'nyts\'kyy',
      '–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ –æ–±–ª.': 'Chernihiv',
      '–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª.': 'Ivano-Frankivs\'k',
      '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª.': 'Kiev'
    };
    
    // Create a mapping function based on current metric
    data.forEach(row => {
      const ukrainianName = row.Region;
      const englishName = regionNameMapping[ukrainianName];
      
      if (englishName) {
      let value = 0;
      
        // Map config metric to actual CSV column
        switch (config.metric) {
          case 'Total_Students':
            value = parseInt(row.Total_Students) || 0;
            break;
          case 'Average_Score':
          value = parseFloat(row.Average_Score) || 0;
          break;
          case 'Near_Perfect_Percentage':
            value = parseFloat(row.Near_Perfect_Percentage) || 0;
            break;
          case 'Std_Deviation':
            value = parseFloat(row.Std_Deviation) || 0;
            break;
          case 'Nomination_Count':
          value = parseInt(row.Nomination_Count) || 0;
          break;
          case 'Min_Score':
            value = parseFloat(row.Min_Score) || 0;
            break;
          case 'Median_Age':
          value = parseFloat(row.Median_Age) || 0;
          break;
          case 'Min_Age':
            value = parseFloat(row.Min_Age) || 0;
            break;
          case 'Under_18_Percentage':
            value = parseFloat(row.Under_18_Percentage) || 0;
            break;
          case 'Under_18_Count':
            value = parseInt(row.Under_18_Count) || 0;
            break;
          case 'Over_30_Percentage':
            value = parseFloat(row.Over_30_Percentage) || 0;
            break;
          case 'Over_30_Count':
            value = parseInt(row.Over_30_Count) || 0;
            break;
          case 'Gender_Balance_Score':
            value = parseFloat(row.Gender_Balance_Score) || 0;
            break;
          case 'Female_Percentage':
          value = parseFloat(row.Female_Percentage) || 0;
          break;
          case 'Male_Percentage':
            // If Male_Percentage exists, use it; otherwise calculate as 100 - Female_Percentage
            if (row.Male_Percentage && row.Male_Percentage !== '') {
              value = parseFloat(row.Male_Percentage) || 0;
            } else if (row.Female_Percentage && row.Female_Percentage !== '') {
              value = 100 - (parseFloat(row.Female_Percentage) || 0);
            } else {
              value = 0;
            }
            break;
          case 'Gender_Score_Gap':
            value = parseFloat(row.Gender_Score_Gap) || 0;
            break;
          case 'Female_High_Perf_Percentage':
            value = parseFloat(row.Female_High_Perf_Percentage) || 0;
          break;
          case 'Male_High_Perf_Percentage':
            value = parseFloat(row.Male_High_Perf_Percentage) || 0;
            break;
          case 'Near_Perfect_Count':
            value = parseInt(row.Near_Perfect_Count) || 0;
            break;
          case 'Female_High_Perf_Count':
            value = parseInt(row.Female_High_Perf_Count) || 0;
            break;
          case 'Male_High_Perf_Count':
            value = parseInt(row.Male_High_Perf_Count) || 0;
          break;
        default:
            // Fallback to total students
          value = parseInt(row.Total_Students) || 0;
      }
      
        // Store original value for tooltips
        originalData[englishName] = value;
        
        // Apply logarithmic transformation for specific metrics to better show variation
        if ((currentChapter === 0 && config.metric === 'Total_Students' && value > 0) ||
            (config.metric === 'Under_18_Count' && value > 0)) {
          // Use log10 transformation, adding 1 to avoid log(0)
          mapData[englishName] = Math.log10(value + 1);
          console.log(`üìä Log transform for ${englishName}: ${value} ‚Üí ${mapData[englishName].toFixed(2)}`);
        } else {
        mapData[englishName] = value;
        }
      }
    });

    console.log('üó∫Ô∏è Map data prepared:', {
      metric: config.metric,
      dataCount: Object.keys(mapData).length,
      sampleData: Object.fromEntries(Object.entries(mapData).slice(0, 3)),
      sampleOriginal: Object.fromEntries(Object.entries(originalData).slice(0, 3)),
      isLogarithmic: (currentChapter === 0 && config.metric === 'Total_Students') || config.metric === 'Under_18_Count'
    });

    return { mapData, originalData };
  };

  // Navigation sidebar component
  const NavigationSidebar = () => {
    const currentIndex = getCurrentSectionIndex();
    const canGoUp = currentIndex > 0;
    const canGoDown = currentIndex < totalSections.current - 1;

    return (
      <div className="navigation-sidebar">
        {/* Up Arrow */}
        <button 
          className={`nav-arrow nav-arrow-up ${!canGoUp ? 'disabled' : ''}`}
          onClick={goToPreviousSection}
          disabled={!canGoUp}
          title="Previous Section (‚Üë)"
        >
          ‚ñ≤
        </button>

        {/* Section Dots */}
        <div className="nav-dots">
          {sectionMap.current.map((section, index) => (
            <div
              key={section.id}
              className={`nav-dot ${index === currentIndex ? 'active' : ''} ${section.type} ${section.hasSubsections ? 'has-subsections' : ''}`}
              onClick={() => navigateToChapter(index)}
              title={`${section.chapterTitle}${section.hasSubsections ? ' (has subsections)' : ''}`}
            >
              <span className="nav-dot-number">{index + 1}</span>

            </div>
          ))}
        </div>

        {/* Down Arrow */}
        <button 
          className={`nav-arrow nav-arrow-down ${!canGoDown ? 'disabled' : ''}`}
          onClick={goToNextSection}
          disabled={!canGoDown}
          title="Next Section (‚Üì)"
        >
          ‚ñº
        </button>

        {/* Keyboard hint */}
        <div className="keyboard-hint">
          Use ‚Üë‚Üì arrow keys
        </div>
      </div>
    );
  };

  // Subsection menu component
  const SubsectionMenu = () => {
    const currentChapterData = storyStructure[currentChapter];
    
    if (!isInSubsectionMode || !currentChapterData?.sections?.length) {
      return null;
    }

    const handleSubsectionClick = (index) => {
      if (index !== currentSubsection) {
        setCurrentSubsection(index);
        console.log('üìç Manual subsection change:', index);
      }
    };

    return (
      <div className="subsection-menu">
        <div className="subsection-indicators">
          {currentChapterData.sections.map((section, index) => (
            <div 
              key={section.id}
              className={`subsection-indicator ${index === currentSubsection ? 'active' : ''}`}
              onClick={() => handleSubsectionClick(index)}
            >
              <span className="subsection-number">{index + 1}</span>
              <span className="subsection-title">{section.title}</span>
            </div>
          ))}
        </div>
        
        {/* Current subsection content */}
        <div className="subsection-content">
          {currentChapterData.sections[currentSubsection] && (
            <ReactMarkdown>{currentChapterData.sections[currentSubsection].content}</ReactMarkdown>
          )}
        </div>
      </div>
    );
  };

  // Toggle between original scrollytelling and choropleth demo
  if (showChoroplethDemo) {
    return (
      <div className="App">
        <header className="App-header">
          <h1>Ukrainian Regional Data Visualization</h1>
          <p>Interactive choropleth maps for any Ukrainian regional data</p>
          <button 
            onClick={() => setShowChoroplethDemo(false)}
            style={{
              padding: '10px 20px',
              backgroundColor: '#007bff',
              color: 'white',
              border: 'none',
              borderRadius: '5px',
              cursor: 'pointer',
              marginTop: '10px'
            }}
          >
            ‚Üê Back to Original Scrollytelling
          </button>
        </header>

        <main>
          <section>
            <UkraineMapExample />
          </section>
          <section>
            <RegionNameDebugger />
          </section>
        </main>
      </div>
    );
  }

  // Don't render until initialized
  if (!isInitialized || sectionMap.current.length === 0) {
    return (
      <div className="app loading">
        <div className="loading-message">
          <h2>Loading Ukrainian Educational Data...</h2>
          <p>Initializing navigation and story structure</p>
          </div>
      </div>
    );
  }

  // Main scrollytelling layout
  return (
    <div className="app">
      {/* Navigation Sidebar */}
      <NavigationSidebar />

      {/* Left Panel - Story Content */}
      <div className={`story-panel ${isInSubsectionMode ? 'subsection-mode' : ''}`}>
        <div className="story-content">
          {storyStructure.map((chapter, index) => (
            <div 
              key={chapter.id}
              className={`chapter-step ${
                index === currentChapter ? 'active' : ''
              } ${isChapterTransitioning ? 'transitioning' : ''}`}
              style={{
                display: index === currentChapter ? 'flex' : 'none',
                position: index === currentChapter ? 'relative' : 'absolute',
                top: index === currentChapter ? '0' : '-100vh'
              }}
            >
              <h1>{chapter.title}</h1>
              <ReactMarkdown>{chapter.content}</ReactMarkdown>
              
              {/* Subsection Menu */}
              <SubsectionMenu />
              
              {/* Stats Panel - Only show for first section */}
              {index === 0 && (
                <div className="chapter-stats">
                  <StatsPanel 
                    data={data} 
                    currentNomination={getCurrentMapConfig().metric}
                    currentStory={index}
                    currentSubsection={isInSubsectionMode && storyStructure[currentChapter]?.sections?.[currentSubsection] ? storyStructure[currentChapter].sections[currentSubsection].id : null}
                  />
                </div>
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Right Panel - Map */}
      <div className="viz-panel">
        <div className="viz-container">
          {/* Map Title */}
          <div className="map-title-section">
            <h2 className="map-main-title">
              {getCurrentMapConfig().title}
            </h2>
            
            {/* Progress Indicator */}
            <div className="progress-indicator">
              <span>Chapter {currentChapter + 1} of {storyStructure.length}</span>
              {isInSubsectionMode && storyStructure[currentChapter]?.sections?.length > 0 && (
                <span> - Section {currentSubsection + 1} of {storyStructure[currentChapter].sections.length}</span>
              )}
            </div>
          </div>
          
          {/* Map Section */}
          <div className={`map-section-full ${isMapTransitioning ? 'transitioning' : ''}`}>
            {(() => {
              const { mapData, originalData } = prepareMapData();
              return (
            <UkraineMap 
              title=""
              showRegionNames={true}
                  regionData={mapData}
                  originalData={originalData}
              colorScale={getCurrentColorScale()}
                  metricName={getUkrainianMetricName(getCurrentMapConfig().metric)}
                  metricUnits=""
              width={850}
              height={520}
                />
              );
            })()}
          </div>
        </div>
      </div>
    </div>
  );
}

export default App; 